// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Result {
  salmonId       Int        @id @default(autoincrement()) @map("salmon_id")
  bossCounts     Int[]      @map("boss_counts")
  bossKillCounts Int[]      @map("boss_kill_counts")
  goldenIkuraNum Int        @map("golden_ikura_num")
  noNightWaves   Boolean    @map("no_night_waves")
  ikuraNum       Int        @map("ikura_num")
  dangerRate     Float      @map("danger_rate")
  startTime      DateTime   @map("start_time")
  playTime       DateTime   @map("play_time")
  endTime        DateTime   @map("end_time")
  members        String[]
  players        Player[]
  waves          Wave[]
  jobResult      JobResult?
  schedule       Schedule?  @relation(fields: [startTime, endTime], references: [startTime, endTime])
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt()

  @@unique([playTime, members])
  @@index([goldenIkuraNum, ikuraNum, members])
  @@map("results")
}

model JobResult {
  id            Int     @id @map("salmon_id")
  failureReason String? @map("failure_reason")
  failureWave   Int?    @map("failure_wave")
  isClear       Boolean @map("is_clear")
  result        Result  @relation(fields: [id], references: [salmonId])

  @@map("job_results")
}

model Schedule {
  startTime  DateTime @id @map("start_time")
  stageId    Int      @map("stage_id")
  endTime    DateTime @map("end_time")
  rareWeapon Int?     @map("rare_weapon")
  weaponList Int[]    @map("weapon_list")
  results    Result[]

  @@unique([startTime, endTime])
  @@map("schedules")
}

model Player {
  id              Int    @id @default(autoincrement())
  nsaid           String
  bossKillCounts  Int[]  @map("boss_kill_counts")
  deadCount       Int    @map("dead_count")
  goldenIkuraNum  Int    @map("golden_ikura_num")
  helpCount       Int    @map("help_count")
  ikuraNum        Int    @map("ikura_num")
  jobId           Int?   @map("job_id")
  jobScore        Int?   @map("job_score")
  jobRate         Int?   @map("job_rate")
  kumaPoint       Int?   @map("kuma_point")
  gradeId         Int?   @map("grade_id")
  gradePoint      Int?   @map("grade_point")
  gradePointDelta Int?   @map("grade_point_delta")
  name            String
  species         String
  style           String
  specialId       Int    @map("special_id")
  specialCounts   Int[]  @map("special_count")
  weaponList      Int[]  @map("weapon_list")
  result          Result @relation(fields: [resultId], references: [salmonId])
  resultId        Int

  @@unique([resultId, nsaid])
  @@map("players")
}

model Wave {
  id                Int     @id @default(autoincrement())
  waveId            Int     @map("wave_id") // WAVE数
  eventType         Int     @map("event_type") // イベント
  waterLevel        Int     @map("water_level") // 潮位
  goldenIkuraNum    Int     @map("golden_ikura_num") // 金イクラ数
  goldenIkuraPopNum Int     @map("golden_ikura_pop_num") // 金イクラドロップ数
  ikuraNum          Int     @map("ikura_num") // 赤イクラ数
  quotaNum          Int     @map("quota_num") // ノルマ数
  failureReason     String? @map("failure_reason") // 失敗理由
  isClear           Boolean @map("is_clear") // クリアしたか
  result            Result  @relation(fields: [resultId], references: [salmonId])
  resultId          Int

  @@unique([resultId, waveId])
  @@index([eventType, waterLevel, goldenIkuraNum, ikuraNum])
  @@map("waves")
}

model User {
  id                 Int       @id @default(autoincrement())
  uid                String    @unique // Twitter ID
  name               String // Twitter name
  screenName         String    @map("screen_name") // Twitter screen name
  thumbnailURL       String?   @map("thumbnail_url") // 表示される画像
  isVerified         Boolean   @map("is_verified") // 認証済みか
  isImperialScholars Boolean   @map("is_imperial_scholars") // 特待生かどうか
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt()
  accounts           Account[]

  @@map("users")
}

model Account {
  id           Int     @id @default(autoincrement())
  nsaid        String  @unique
  nickname     String  @map("nickname")
  friendCode   String  @unique
  thumbnailURL String? @map("thumbnail_url")

  User   User? @relation(fields: [userId], references: [id])
  userId Int?
  @@map("accounts")
}
