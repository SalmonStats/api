// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Result {
  salmonId       Int      @id @default(autoincrement()) @map("salmon_id")
  bossCounts     Int[]    @map("boss_counts")
  bossKillCounts Int[]    @map("boss_kill_counts")
  dangerRate     Float    @map("danger_rate")
  endTime        Int      @map("end_time")
  playTime       Int      @map("play_time")
  startTime      Int      @map("start_time")
  failureReason  String?  @map("failure_reason")
  failureWave    Int?     @map("failure_wave")
  isClear        Boolean  @map("is_clear")
  members        String[]
  players        Player[]
  waves          Wave[]
  schedule       Schedule @relation(fields: [startTime], references: [startTime])

  @@unique([playTime, members])
  @@map("results")
}

model Schedule {
  startTime  Int      @id @map("start_time")
  stageId    Int      @map("stage_id")
  endTime    Int      @map("end_time")
  rareWeapon Int?     @map("rare_weapon")
  weaponList Int[]    @map("weapon_list")
  results    Result[]

  @@map("schedules")
}

model Player {
  id              Int     @id @default(autoincrement())
  salmonId        Int     @map("salmon_id")
  nsaid           String
  bossKillCounts  Int[]   @map("boss_kill_counts")
  deadCount       Int     @map("dead_count")
  goldenIkuraNum  Int     @map("golden_ikura_num")
  helpCount       Int     @map("help_count")
  ikuraNum        Int     @map("ikura_num")
  jobId           Int?    @map("job_id")
  jobScore        Int?    @map("job_score")
  jobRate         Int?    @map("job_rate")
  kumaPoint       Int?    @map("kuma_point")
  gradeId         Int?    @map("grade_id")
  gradePoint      Int?    @map("grade_point")
  gradePointDelta Int?    @map("grade_point_delta")
  name            String
  species         String
  style           String
  specialId       Int     @map("special_id")
  specialCount    Int[]   @map("special_count")
  weaponList      Int[]   @map("weapon_list")
  result          Result? @relation(fields: [salmonId], references: [salmonId])

  @@unique([salmonId, nsaid])
  @@map("players")
}

model Wave {
  id                Int     @id @default(autoincrement())
  index             Int // WAVE数
  salmonId          Int     @map("salmon_id") // リザルトID
  eventType         Int     @map("event_type") // イベント
  waterLevel        Int     @map("water_level") // 潮位
  goldenIkuraNum    Int     @map("golden_ikura_num") // 金イクラ数
  goldenIkuraPopNum Int     @map("golden_ikura_pop_num") // 金イクラドロップ数
  ikuraNum          Int     @map("ikura_num") // 赤イクラ数
  quotaNum          Int     @map("quota_num") // ノルマ数
  failureReason     String? @map("failure_reason") // 失敗理由
  isClear           Boolean @map("is_clear") // クリアしたか
  result            Result? @relation(fields: [salmonId], references: [salmonId])

  @@map("waves")
}

model User {
  id           Int     @id @default(autoincrement())
  uid          String  @unique // SplatNet2 ID
  username     String? // ユーザ名
  mail         String? // メールアドレス
  password     String? // パスワード
  thumbnailURL String? @map("thumbnail_url") // 表示される画像

  @@map("users")
}
