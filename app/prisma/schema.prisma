// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum WaterLevel {
  LOW
  MIDDLE
  HIGH
}

enum GradeType {
  INTERN
  APPARENTICE
  PARTTIMER
  GOGETTER
  OVERACHIVER
  PROFRESHIONAL
}

enum FailureReason {
  TIMELIMIT
  WIPEOUT
}

enum EventType {
  WATERLEVELS
  RUSH
  GEYSER
  GRILLER
  RALLY
  FOG
  MISSILE
}

enum Species {
  INKLING
  OCTOLING
}

enum Style {
  GIRL
  BOY
}

enum SpecialType {
  SPLATBOMBLAUNCHER
  STINGRAY
  INKJET
  SPLASHDOWN
}

enum StageType {
  SHAKEUP
  SHAKESHIP
  SHAKEHOUSE
  SHAKELIFT
  SHAKERIDE
}

enum WeaponType {
  RANDOMGOLD
  RANDOMGREEN
  SHOOTERSHORT
  SHOOTERFIRST
  SHOOTERPRECISION
  SHOOTERBLAZE
  SHOOTERNORMAL
  SHOOTERGRAVITY
  SHOOTERQUICKMIDDLE
  SHOOTEREXPERT
  SHOOTERHEAVY
  SHOOTERLONG
  SHOOTERBLASTERSHORT
  SHOOTERBLASTERMIDDLE
  SHOOTERBLASTERLONG
  SHOOTERBLASTERLIGHTSHORT
  SHOOTERBLASTERLIGHT
  SHOOTERBLASTERLIGHTLONG
  SHOOTERTRIPLEQUICK
  SHOOTERTRIPLEMIDDLE
  SHOOTERFLASH
  ROLLERCOMPACT
  ROLLERNORMAL
  ROLLERHEAVY
  ROLLERHUNTER
  ROLLERBRUSHMINI
  ROLLERBRUSHNORMAL
  CHARGERQUICK
  CHARGERNORMAL
  CHARGERNORMALSCOPE
  CHARGERLONG
  CHARGERLONGSCOPE
  CHARGERLIGHT
  CHARGERKEEPER
  SLOSHERSTRONG
  SLOSHERDIFFUSION
  SLOSHERLAUNCHER
  SLOSHERBATHTUB
  SLOSHERWASHTUB
  SPINNERQUICK
  SPINNERSTANDARD
  SPINNERHYPER
  SPINNERDOWNPOUR
  SPINNERSEREIN
  TWINSSHORT
  TWINSNORMAL
  TWINSGALLON
  TWINSDUAL
  TWINSSTEPPER
  UMBRELLANORMAL
  UMBRELLAWIDE
  UMBRELLACOMPACT
  SHOOTERBLASTERBURST
  UMBRELLAAUTOASSAULT
  CHARGERSPARK
  SLOSHERVASE
}

model Results {
  salmon_id      Int       @id @default(autoincrement())
  bossCounts     Int[]
  bossKillCounts Int[]
  dangerRate     Float
  endTime        Int
  playTime       Int
  startTime      Int
  failureReason  Int?
  failureWave    Int?
  isClear        Boolean
  members        String[] // プレイヤーID一覧
  players        Players[]
  waves          Waves[]
  schedule       Schedule  @relation(fields: [startTime], references: [startTime])

  @@unique([playTime, members])
}

model Schedule {
  startTime   Int       @id
  stageId     Int
  endTime     Int
  rareWeapon  Int?
  weaponLists Int[]
  Results     Results[]
}

model Players {
  id              Int     @id @default(autoincrement())
  salmon_id       Int
  nsaid           String
  bossKillCounts  Int[]
  deadCount       Int
  goldenIkuraNum  Int
  helpCount       Int
  ikuraNum        Int
  jobId           Int?
  jobScore        Int?
  jobRate         Int?
  kumaPoint       Int?
  gradeId         Int?
  gradePoint      Int?
  gradePointDelta Int?
  name            String
  species         String
  style           String
  specialId       Int
  specialCount    Int[]
  weaponList      Int[]
  results         Results @relation(fields: [salmon_id], references: [salmon_id])

  @@unique([salmon_id, nsaid])
}

model Waves {
  id                Int     @id @default(autoincrement())
  index             Int // WAVE数
  salmon_id         Int // リザルトID
  eventType         Int // イベント
  waterLevel        Int // 潮位
  goldenIkuraNum    Int // 金イクラ数
  goldenIkuraPopNum Int // 金イクラドロップ数
  ikuraNum          Int // 赤イクラ数
  quotaNum          Int // ノルマ数
  failureReason     Int? // 失敗理由
  isClear           Boolean // クリアしたか
  results           Results @relation(fields: [salmon_id], references: [salmon_id])
}

model Users {
  id           Int     @id @default(autoincrement())
  uid          String  @unique // SplatNet2 ID
  username     String? // ユーザ名
  mail         String? // メールアドレス
  password     String? // パスワード
  thumbnailURL String? // 表示される画像
}

model SplatNet2 {
  nsaid String @id @unique
}
